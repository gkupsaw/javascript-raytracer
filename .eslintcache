[{"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/index.js":"1","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/App.js":"2","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/auto/reportWebVitals.js":"3","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/index.js":"4","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/parser/scene-parser.js":"5","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/lib/index.js":"6","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/parser/constants.js":"7","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/raytracing/RayScene.js":"8","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/raytracing/LightingUtils.js":"9","/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/raytracing/ImplicitShapes.js":"10"},{"size":525,"mtime":1611447832679,"results":"11","hashOfConfig":"12"},{"size":502,"mtime":1611462150166,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1611447764692,"results":"14","hashOfConfig":"12"},{"size":735,"mtime":1611448005462,"results":"15","hashOfConfig":"12"},{"size":7323,"mtime":1611459080995,"results":"16","hashOfConfig":"12"},{"size":3037,"mtime":1611462713183,"results":"17","hashOfConfig":"12"},{"size":1052,"mtime":1611458312567,"results":"18","hashOfConfig":"12"},{"size":10031,"mtime":1611462770008,"results":"19","hashOfConfig":"12"},{"size":1021,"mtime":1611462574973,"results":"20","hashOfConfig":"12"},{"size":5644,"mtime":1611462621713,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13j71y1",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":8,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/index.js",[],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/App.js",["43"],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/auto/reportWebVitals.js",[],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/index.js",[],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/parser/scene-parser.js",[],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/lib/index.js",[],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/parser/constants.js",[],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/raytracing/RayScene.js",["44","45"],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/raytracing/LightingUtils.js",["46","47","48","49","50","51","52","53"],"/Users/griffinkupsaw/Documents/mini projects/html-projects/raytracer/src/utils/raytracing/ImplicitShapes.js",["54"],"#include \"ImplicitShapes.h\"\n\nfloat EPSILON_RAY = 1e-5;\n\nImplicitShapes::ImplicitShapes()\n{\n}\n\nImplicitShapes::~ImplicitShapes()\n{\n}\n\n\nfloat ImplicitShapes::implicitTrunk(const Ray &ray, float a, float b, float c, float top, float bottom) {\n    float minT = INFINITY;\n    float discriminant = pow(b, 2) - 4.f * a * c;\n    glm::vec4 p = ray.eye;\n    glm::vec4 d = ray.dir;\n\n    if (discriminant >= 0 && a != 0) {\n        float denom = 2.f * a;\n        float sqrtDiscr = sqrt(discriminant);\n\n        float t1 = (-b + sqrtDiscr) / denom;\n        if (t1 >= 0) {\n            glm::vec4 intersectPoint1 = p + d * t1;\n            if (intersectPoint1.y >= bottom - EPSILON_RAY && intersectPoint1.y <= top + EPSILON_RAY) {\n                minT = t1;\n            }\n        }\n\n        float t2 = (-b - sqrtDiscr) / denom;\n        if (t2 >= 0 && t2 < minT) {\n            glm::vec4 intersectPoint2 = p + d * t2;\n            if (intersectPoint2.y >= bottom && intersectPoint2.y <= top) {\n                minT = t2;\n            }\n        }\n    }\n\n    return minT;\n}\n\nfloat ImplicitShapes::implicitPlane(const Ray &ray, const Ray &planeNormal) {\n    float denom = glm::dot(planeNormal.dir, ray.dir);\n    if (fabs(denom) <= EPSILON_RAY) {\n        return INFINITY;\n    }\n    float t = glm::dot(planeNormal.dir, planeNormal.eye - ray.eye) / denom;\n    return t >= EPSILON_RAY ? t : INFINITY;\n}\n\nIntersectionData ImplicitShapes::implicitCone(const Ray &ray) {\n    IntersectionData intersection;\n    glm::vec4 p = ray.eye;\n    glm::vec4 d = ray.dir;\n\n    float top = 0.5f;\n    float bottom = -0.5f;\n    float m = 2;\n    float bottomR = (top - bottom) / m;\n\n    float a = pow(d.x, 2) + pow(d.z, 2) - (pow(d.y, 2) / 4.f);\n    float b = (2.f * p.x * d.x) + (2.f * p.z * d.z) - (p.y * d.y / 2.f) + (d.y / 4.f);\n    float c = pow(p.x, 2) + pow(p.z, 2) - (pow(p.y, 2) / 4.f) + (p.y / 4.f) - pow(top / m, 2);\n\n    float trunkT = implicitTrunk(ray, a, b, c);\n    glm::vec4 intersectionPoint1 = p + d * trunkT;\n    glm::vec4 normalAtIntersection = glm::normalize(glm::vec4(2.f * intersectionPoint1.x, (0.5f - intersectionPoint1.y) / 2.f, 2.f * intersectionPoint1.z, 0));\n    intersection = { normalAtIntersection, trunkT };\n\n    Ray bottomCapNormal = { glm::vec4(0, bottom, 0, 1.f), glm::vec4(0, -1.f, 0, 0) };\n    float t3 = implicitPlane(ray, bottomCapNormal);\n    if (t3 < intersection.t) {\n        glm::vec4 intersectionPoint2 = p + d * t3;\n        if (pow(intersectionPoint2.x, 2) + pow(intersectionPoint2.z, 2) <= pow(bottomR, 2)) {\n            intersection = { bottomCapNormal.dir, t3 };\n        }\n    }\n\n    return intersection;\n}\n\nIntersectionData ImplicitShapes::implicitCylinder(const Ray &ray) {\n    IntersectionData intersection;\n    glm::vec4 p = ray.eye;\n    glm::vec4 d = ray.dir;\n\n    float top = 0.5f;\n    float bottom = -0.5f;\n    float r = 0.5f;\n\n    float a = pow(d.x, 2) + pow(d.z, 2);\n    float b = (2 * p.x * d.x) + (2 * p.z * d.z);\n    float c = pow(p.x, 2) + pow(p.z, 2) - pow(r, 2);\n\n    float trunkT = implicitTrunk(ray, a, b, c);\n    glm::vec4 intersectionPoint1 = p + d * trunkT;\n    glm::vec4 intersectionNormal = glm::normalize(glm::vec4(intersectionPoint1.x * 2.f, 0, intersectionPoint1.z * 2.f, 0));\n\n    intersection = { intersectionNormal, trunkT };\n\n    Ray bottomCapNormal = { glm::vec4(0, bottom, 0, 1.f), glm::vec4(0, -1.f, 0, 0) };\n    float t3 = implicitPlane(ray, bottomCapNormal);\n    if (t3 < intersection.t) {\n        glm::vec4 intersectionPoint2 = p + d * t3;\n        if (pow(intersectionPoint2.x, 2) + pow(intersectionPoint2.z, 2) <= pow(r, 2)) {\n            intersection = { bottomCapNormal.dir, t3 };\n        }\n    }\n\n    Ray topCapNormal = { glm::vec4(0, top, 0, 1.f), glm::vec4(0, 1.f, 0, 0) };\n    float t4 = implicitPlane(ray, topCapNormal);\n    if (t4 < intersection.t) {\n        glm::vec4 intersectionPoint3 = p + d * t4;\n        if (pow(intersectionPoint3.x, 2) + pow(intersectionPoint3.z, 2) <= pow(r, 2)) {\n            intersection = { topCapNormal.dir, t4 };\n        }\n    }\n\n    return intersection;\n}\n\nIntersectionData ImplicitShapes::implicitCube(const Ray &ray) {\n    IntersectionData intersection;\n    float r = 0.5f;\n    glm::vec4 p = ray.eye;\n    glm::vec4 d = ray.dir;\n\n    std::vector<glm::vec4> normals = {\n        {  1,  0,  0, 0 },\n        { -1,  0,  0, 0 },\n        {  0,  1,  0, 0 },\n        {  0, -1,  0, 0 },\n        {  0,  0,  1, 0 },\n        {  0,  0, -1, 0 },\n    };\n\n    float t;\n    float limit = r + EPSILON_RAY;\n    for (glm::vec4 normal : normals) {\n        Ray faceRay = { glm::vec4(normal.xyz() * r, 1.f), normal };\n        t = implicitPlane(ray, faceRay);\n        if (t < intersection.t) {\n            glm::vec4 pointOnShape = p + d * t;\n            if (pointOnShape.x >= -limit && pointOnShape.x <= limit\n                    && pointOnShape.y >= -limit && pointOnShape.y <= limit\n                    && pointOnShape.z >= -limit && pointOnShape.z <= limit) {\n                intersection = { normal, t };\n            }\n        }\n    }\n\n    return intersection;\n}\n\nIntersectionData ImplicitShapes::implicitSphere(const Ray &ray) {\n    IntersectionData intersection;\n    float r = 0.5f;\n    glm::vec4 p = ray.eye;\n    glm::vec4 d = ray.dir;\n\n\n    float a = pow(d.x, 2) + pow(d.z, 2) + pow(d.y, 2);\n    float b = (2.f * p.x * d.x) + (2.f * p.z * d.z) + (2.f * p.y * d.y);\n    float c = pow(p.x, 2) + pow(p.z, 2) + pow(p.y, 2) - pow(r, 2);\n\n    float minT = implicitTrunk(ray, a, b, c);\n\n    glm::vec4 IntersectionData = p + d * minT;\n    glm::vec4 intersectionNormal = glm::vec4(2.f * IntersectionData.xyz(), 0.f);\n    intersection = { intersectionNormal, minT };\n\n    return intersection;\n}\n",{"ruleId":"55","severity":1,"message":"56","line":4,"column":10,"nodeType":"57","messageId":"58","endLine":4,"endColumn":18},{"ruleId":"55","severity":1,"message":"59","line":29,"column":7,"nodeType":"57","messageId":"58","endLine":29,"endColumn":13},{"ruleId":"55","severity":1,"message":"60","line":34,"column":7,"nodeType":"57","messageId":"58","endLine":34,"endColumn":13},{"ruleId":"61","severity":2,"message":"62","line":14,"column":9,"nodeType":"57","messageId":"63","endLine":14,"endColumn":12},{"ruleId":"61","severity":2,"message":"62","line":14,"column":33,"nodeType":"57","messageId":"63","endLine":14,"endColumn":36},{"ruleId":"61","severity":2,"message":"62","line":14,"column":57,"nodeType":"57","messageId":"63","endLine":14,"endColumn":60},{"ruleId":"61","severity":2,"message":"64","line":15,"column":21,"nodeType":"57","messageId":"63","endLine":15,"endColumn":33},{"ruleId":"61","severity":2,"message":"64","line":16,"column":19,"nodeType":"57","messageId":"63","endLine":16,"endColumn":31},{"ruleId":"61","severity":2,"message":"64","line":17,"column":20,"nodeType":"57","messageId":"63","endLine":17,"endColumn":32},{"ruleId":"61","severity":2,"message":"65","line":18,"column":41,"nodeType":"57","messageId":"63","endLine":18,"endColumn":45},{"ruleId":"61","severity":2,"message":"62","line":30,"column":24,"nodeType":"57","messageId":"63","endLine":30,"endColumn":27},{"ruleId":null,"fatal":true,"severity":2,"message":"66","line":1,"column":1},"no-unused-vars","'RayScene' is defined but never used.","Identifier","unusedVar","'CAMERA' is assigned a value but never used.","'CANVAS' is assigned a value but never used.","no-undef","'pow' is not defined.","undef","'lightunction' is not defined.","'sqrt' is not defined.","Parsing error: Unexpected token\n\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 1 | \u001b[39m\u001b[33m#\u001b[39minclude \u001b[32m\"ImplicitShapes.h\"\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m   | \u001b[39m\u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 2 | \u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 3 | \u001b[39mfloat \u001b[33mEPSILON_RAY\u001b[39m \u001b[33m=\u001b[39m \u001b[35m1e-5\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 4 | \u001b[39m\u001b[0m"]