[{"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\index.js":"1","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\App.js":"2","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\auto\\reportWebVitals.js":"3","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\index.js":"4","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\parser\\scene-parser.js":"5","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\raytracing\\RayScene.js":"6","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\raytracing\\Camera.js":"7","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\datatypes.js":"8","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\parser\\constants.js":"9","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\raytracing\\LightingUtils.js":"10","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\raytracing\\ImplicitShapes.js":"11","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\glm.js":"12","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\index.js":"13","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\extendMatrixUtils.js":"14","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\mathjsUtils.js":"15"},{"size":542,"mtime":1611670225837,"results":"16","hashOfConfig":"17"},{"size":546,"mtime":1611670225836,"results":"18","hashOfConfig":"17"},{"size":375,"mtime":1611670225837,"results":"19","hashOfConfig":"17"},{"size":3613,"mtime":1611671062639,"results":"20","hashOfConfig":"17"},{"size":9390,"mtime":1611670225840,"results":"21","hashOfConfig":"17"},{"size":11172,"mtime":1611670957161,"results":"22","hashOfConfig":"17"},{"size":5559,"mtime":1611670225841,"results":"23","hashOfConfig":"17"},{"size":4437,"mtime":1611670225838,"results":"24","hashOfConfig":"17"},{"size":1612,"mtime":1611670225840,"results":"25","hashOfConfig":"17"},{"size":1168,"mtime":1611670225842,"results":"26","hashOfConfig":"17"},{"size":6681,"mtime":1611672517336,"results":"27","hashOfConfig":"17"},{"size":3260,"mtime":1611670225839,"results":"28","hashOfConfig":"17"},{"size":166,"mtime":1611670225839,"results":"29","hashOfConfig":"17"},{"size":1131,"mtime":1611670225839,"results":"30","hashOfConfig":"17"},{"size":178,"mtime":1611670225839,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"vv12n1",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\index.js",[],["67","68"],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\App.js",[],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\auto\\reportWebVitals.js",[],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\index.js",["69","70"],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\parser\\scene-parser.js",["71"],"import {\r\n    vec3,\r\n    vec4,\r\n    RGBA,\r\n    GlobalData,\r\n    LightData,\r\n    ShapeData,\r\n    lightTypes,\r\n    Primitive,\r\n    Material,\r\n    mat_inv,\r\n    translate,\r\n    scale,\r\n    rotate,\r\n    id4,\r\n} from '../lib';\r\nimport {\r\n    defaultData,\r\n    GLOBAL,\r\n    LIGHT,\r\n    CAMERA,\r\n    TRANSBLOCK,\r\n    OBJECT,\r\n    tagnames,\r\n} from './constants';\r\n\r\nlet instantiatedObjects = {}; // TODO: make this non-global\r\n\r\nconst parseFloatAttr = (xmlEl, attr) => parseFloat(xmlEl.getAttribute(attr));\r\n\r\nconst getValue = (xmlEl) => parseFloatAttr(xmlEl, 'v');\r\nconst getVec3 = (xmlEl) =>\r\n    vec3(\r\n        parseFloatAttr(xmlEl, 'x'),\r\n        parseFloatAttr(xmlEl, 'y'),\r\n        parseFloatAttr(xmlEl, 'z')\r\n    );\r\nconst getPosition = (xmlEl) =>\r\n    vec4(\r\n        parseFloatAttr(xmlEl, 'x'),\r\n        parseFloatAttr(xmlEl, 'y'),\r\n        parseFloatAttr(xmlEl, 'z'),\r\n        1\r\n    );\r\nconst getDirection = (xmlEl) =>\r\n    vec4(\r\n        parseFloatAttr(xmlEl, 'x'),\r\n        parseFloatAttr(xmlEl, 'y'),\r\n        parseFloatAttr(xmlEl, 'z'),\r\n        0\r\n    );\r\nconst getRGBA = (xmlEl) =>\r\n    vec4(\r\n        // new RGBA\r\n        parseFloatAttr(xmlEl, 'r'),\r\n        parseFloatAttr(xmlEl, 'g'),\r\n        parseFloatAttr(xmlEl, 'b'),\r\n        1\r\n    );\r\n\r\nconst parseGlobal = (global) => {\r\n    let globalData = new GlobalData({ ...defaultData.global });\r\n\r\n    for (const datum of global.children) {\r\n        let propName, propVal;\r\n        switch (datum.tagName) {\r\n            case tagnames.global.DIFFUSE:\r\n                propName = 'kd';\r\n                propVal = datum.getAttribute('v');\r\n                break;\r\n            case tagnames.global.SPECULAR:\r\n                propName = 'ks';\r\n                propVal = datum.getAttribute('v');\r\n                break;\r\n            case tagnames.global.AMBIENT:\r\n                propName = 'ka';\r\n                propVal = datum.getAttribute('v');\r\n                break;\r\n            default:\r\n                console.error(`Unknown global data tag: ${datum.tagName}`);\r\n                break;\r\n        }\r\n        if (propName) {\r\n            globalData[propName] = propVal;\r\n        }\r\n    }\r\n\r\n    return globalData;\r\n};\r\n\r\nconst parseCamera = (camera) => {\r\n    let cameraData = {};\r\n\r\n    for (const attr of camera.children) {\r\n        switch (attr.tagName) {\r\n            case tagnames.camera.POS:\r\n                cameraData['pos'] = getPosition(attr);\r\n                break;\r\n            case tagnames.camera.UP:\r\n                cameraData['up'] = getDirection(attr);\r\n                break;\r\n            default:\r\n                console.error(`Unknown camera data tag: ${attr.tagName}`);\r\n                break;\r\n        }\r\n    }\r\n\r\n    return cameraData;\r\n};\r\n\r\nconst parseLight = (light) => {\r\n    let lightData = new LightData({\r\n        type: lightTypes.POINT,\r\n        func: vec3(1, 0, 0),\r\n    });\r\n\r\n    for (const attr of light.children) {\r\n        let propName, propVal;\r\n        switch (attr.tagName) {\r\n            case tagnames.light.ID:\r\n                propName = 'id';\r\n                propVal = getValue(attr);\r\n                break;\r\n            case tagnames.light.COLOR:\r\n                propName = 'color';\r\n                propVal = getRGBA(attr);\r\n                break;\r\n            case tagnames.light.POS:\r\n                propName = 'pos';\r\n                propVal = getPosition(attr);\r\n                break;\r\n            default:\r\n                console.error(`Unknown light data tag: ${attr.tagName}`);\r\n                break;\r\n        }\r\n        if (propName) {\r\n            lightData[propName] = propVal;\r\n        }\r\n    }\r\n\r\n    return lightData;\r\n};\r\n\r\nconst parseObject = (object, transformation = id4()) => {\r\n    const name = object.getAttribute('name');\r\n    const type = object.getAttribute('type');\r\n    let objects = [];\r\n\r\n    switch (type) {\r\n        case 'primitive':\r\n            let material = new Material({ ...defaultData.material });\r\n\r\n            const materialColorTagnames = [\r\n                tagnames.object.DIFFUSE,\r\n                tagnames.object.SPECULAR,\r\n                tagnames.object.AMBIENT,\r\n                tagnames.object.REFLECTIVE,\r\n            ];\r\n\r\n            for (const attr of object.children) {\r\n                const materialColorType = materialColorTagnames.find(\r\n                    (t) => t.name === attr.tagName\r\n                );\r\n                if (materialColorType) {\r\n                    material.setProperty(\r\n                        materialColorType.propName,\r\n                        getRGBA(attr)\r\n                    );\r\n                } else {\r\n                    switch (attr.tagName) {\r\n                        case tagnames.object.SHININESS.name:\r\n                        case tagnames.object.BLEND.name:\r\n                            material.setProperty(attr.tagName, getValue(attr));\r\n                            break;\r\n                        default:\r\n                            console.error(\r\n                                `Unknown primitive object data tag: ${attr.tagName}`\r\n                            );\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const primitive = new Primitive({ type: name, material });\r\n            const inverseTransformation = mat_inv(transformation);\r\n            const objectData = new ShapeData({\r\n                primitive,\r\n                transformation,\r\n                inverseTransformation,\r\n            });\r\n\r\n            if (!instantiatedObjects[name]) {\r\n                instantiatedObjects[name] = objectData;\r\n            }\r\n\r\n            objects.push(objectData);\r\n            break;\r\n        case 'tree':\r\n            for (const attr of object.children) {\r\n                switch (attr.tagName) {\r\n                    case TRANSBLOCK:\r\n                        for (const treeChild of attr.children) {\r\n                            switch (treeChild.tagName) {\r\n                                case tagnames.transblock.TRANSLATE:\r\n                                    transformation = translate(\r\n                                        transformation,\r\n                                        getVec3(treeChild)\r\n                                    );\r\n                                    break;\r\n                                case tagnames.transblock.ROTATE:\r\n                                    transformation = rotate(\r\n                                        transformation,\r\n                                        treeChild.getAttribute('angle'),\r\n                                        getVec3(treeChild)\r\n                                    );\r\n                                    break;\r\n                                case tagnames.transblock.SCALE:\r\n                                    transformation = scale(\r\n                                        transformation,\r\n                                        getVec3(treeChild)\r\n                                    );\r\n                                    break;\r\n                                case OBJECT:\r\n                                    objects = objects.concat(\r\n                                        parseObject(treeChild, transformation)\r\n                                    );\r\n                                    break;\r\n                                default:\r\n                                    console.error(\r\n                                        `Unknown treeChild data tag: ${treeChild.tagName}`\r\n                                    );\r\n                            }\r\n                        }\r\n                        break;\r\n                    case OBJECT:\r\n                        objects.push(parseObject(attr, transformation));\r\n                        break;\r\n                    default:\r\n                        console.error(\r\n                            `Unknown root object data tag: ${attr.tagName}`\r\n                        );\r\n                        break;\r\n                }\r\n            }\r\n            break;\r\n        case 'instance':\r\n            objects.push(new ShapeData({ ...instantiatedObjects[name] }));\r\n            break;\r\n        default:\r\n            console.error(`Unknown object type tag: ${type}`);\r\n            break;\r\n    }\r\n\r\n    return objects;\r\n};\r\n\r\nconst parse = (scene) => {\r\n    const parser = new DOMParser();\r\n    const xmlDoc = parser.parseFromString(scene, 'text/xml');\r\n\r\n    let data = { ...defaultData };\r\n\r\n    const scenefile = xmlDoc.getElementsByTagName('scenefile')[0];\r\n\r\n    let child = scenefile.firstElementChild;\r\n    while (child) {\r\n        switch (child.tagName) {\r\n            case GLOBAL:\r\n                data.global = parseGlobal(child);\r\n                break;\r\n            case LIGHT:\r\n                data.light.push(parseLight(child));\r\n                break;\r\n            case CAMERA:\r\n                data.camera = parseCamera(child);\r\n                break;\r\n            case OBJECT:\r\n                data.object = data.object.concat(parseObject(child));\r\n                break;\r\n            default:\r\n                console.error(`Unknown root child tag: ${child.tagName}`);\r\n                break;\r\n        }\r\n\r\n        child = child.nextElementSibling;\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\nconst main = (scenefilePath) => {\r\n    const scene = null;\r\n    const scenegraph = parse(scene);\r\n    return scenegraph;\r\n};\r\n\r\nexport { parse, main };\r\n","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\raytracing\\RayScene.js",["72"],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\raytracing\\Camera.js",[],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\datatypes.js",["73"],"import { vec4 } from './glm';\r\n\r\nconst primitiveTypes = {\r\n    CONE: 'cone',\r\n    CYLINDER: 'cylinder',\r\n    CUBE: 'cube',\r\n    SPHERE: 'sphere',\r\n    UNK: 'UNK',\r\n};\r\n\r\nconst lightTypes = {\r\n    POINT: 'point',\r\n    DIRECTIONAL: 'directional',\r\n    UNK: 'UNK',\r\n};\r\n\r\nconst transformationTypes = {\r\n    TRANSLATE: 'translate',\r\n    ROTATE: 'rotate',\r\n    SCALE: 'scale',\r\n    UNK: 'UNK',\r\n};\r\n\r\nclass DataType {\r\n    setProperty = (propName, val) => {\r\n        if (this.hasOwnProperty(propName)) {\r\n            this[propName] = val;\r\n        } else {\r\n            console.error(\r\n                `Bad property name given to setProperty for DataType: ${propName}`\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nclass RGBA extends DataType {\r\n    constructor(r, g, b, a) {\r\n        super();\r\n        this.r = parseInt(r) ?? 1;\r\n        this.g = parseInt(g) ?? 1;\r\n        this.b = parseInt(b) ?? 1;\r\n        this.a = parseInt(a) ?? 1;\r\n    }\r\n}\r\n\r\nclass Ray extends DataType {\r\n    constructor(eye, dir) {\r\n        super();\r\n        this.eye = eye;\r\n        this.dir = dir;\r\n    }\r\n}\r\n\r\nclass GlobalData extends DataType {\r\n    constructor({ kd, ka, ks } = {}) {\r\n        super();\r\n        this.kd = kd;\r\n        this.ka = ka;\r\n        this.ks = ks;\r\n    }\r\n}\r\n\r\nclass LightData extends DataType {\r\n    constructor({ id, type, color, func, pos, dir } = {}) {\r\n        super();\r\n        this.id = id;\r\n        this.type = type;\r\n        this.color = color;\r\n        this.func = func;\r\n        this.pos = pos;\r\n        this.dir = dir;\r\n    }\r\n}\r\n\r\nclass ShapeData extends DataType {\r\n    constructor({\r\n        primitive,\r\n        transformation,\r\n        inverseTransformation,\r\n        texture,\r\n    } = {}) {\r\n        super();\r\n        this.primitive = primitive ?? new Primitive();\r\n        this.transformation = transformation;\r\n        this.inverseTransformation = inverseTransformation;\r\n        this.texture = texture;\r\n    }\r\n}\r\n\r\nclass IntersectionData extends DataType {\r\n    constructor(normal, t, shape) {\r\n        super();\r\n        this.normal = normal;\r\n        this.t = t ?? Infinity;\r\n        this.shape = shape ?? new ShapeData();\r\n    }\r\n}\r\n\r\nclass Primitive extends DataType {\r\n    constructor({ type, meshfile, material } = {}) {\r\n        super();\r\n        this.type = type ?? primitiveTypes.UNK;\r\n        this.meshfile = meshfile;\r\n        this.material = material ?? new Material();\r\n    }\r\n}\r\n\r\nclass Material extends DataType {\r\n    constructor({\r\n        cDiffuse,\r\n        cAmbient,\r\n        cSpecular,\r\n        cReflective,\r\n        blend,\r\n        shininess,\r\n    } = {}) {\r\n        super();\r\n        this.cDiffuse = cDiffuse;\r\n        this.cAmbient = cAmbient;\r\n        this.cSpecular = cSpecular;\r\n        this.cReflective = cReflective;\r\n        this.blend = blend;\r\n        this.shininess = shininess;\r\n    }\r\n}\r\n\r\nclass Transformation extends DataType {\r\n    constructor({ type, translate, scale, rotate, angle, matrix } = {}) {\r\n        super();\r\n        this.type = type ?? transformationTypes.UNK;\r\n        this.translate = translate;\r\n        this.scale = scale;\r\n        this.rotate = rotate;\r\n        this.angle = angle;\r\n        this.matrix = matrix;\r\n    }\r\n}\r\n\r\nclass CanvasData {\r\n    dataSize = 4;\r\n\r\n    constructor(size) {\r\n        this.data = new Uint8ClampedArray(size * this.dataSize);\r\n    }\r\n\r\n    set = (val, index) => {\r\n        if (isNaN(val)) {\r\n            const vec = val;\r\n            if (vec.forEach) {\r\n                vec.forEach((v, i) => {\r\n                    const indivIndex = i.length ? i[0] : i;\r\n                    this.data[this.dataSize * index + indivIndex] = v;\r\n                });\r\n            } else {\r\n                console.error('Bad arg for setting CanvasData');\r\n            }\r\n        } else {\r\n            this.data[index] = val;\r\n        }\r\n    };\r\n\r\n    get = () => this.data;\r\n}\r\n\r\nclass Canvas {\r\n    constructor(height, width) {\r\n        this.height_val = height;\r\n        this.width_val = width;\r\n        this.pixel_data = new CanvasData(height * width);\r\n    }\r\n\r\n    height = () => this.height_val;\r\n    width = () => this.width_val;\r\n    data = () => this.pixel_data;\r\n    update = () => {};\r\n}\r\n\r\nexport {\r\n    primitiveTypes,\r\n    lightTypes,\r\n    transformationTypes,\r\n    RGBA,\r\n    Ray,\r\n    GlobalData,\r\n    LightData,\r\n    ShapeData,\r\n    IntersectionData,\r\n    Primitive,\r\n    Material,\r\n    Transformation,\r\n    CanvasData,\r\n    Canvas,\r\n};\r\n","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\parser\\constants.js",["74"],"import { RGBA, vec4 } from '../lib';\r\n\r\nconst defaultData = {\r\n    global: { ka: 1, kd: 1, ks: 1 },\r\n    camera: {\r\n        pos: vec4(5, 5, 5, 1),\r\n        up: vec4(0, 1, 0, 0),\r\n        look: vec4(-1, -1, -1, 0),\r\n        heightAngle: 45,\r\n        aspectRatio: 1,\r\n    },\r\n    light: [],\r\n    object: [],\r\n\r\n    material: {\r\n        cDiffuse: vec4(0, 0, 0, 1), // new RGBA\r\n        cAmbient: vec4(0, 0, 0, 1), // new RGBA\r\n        cSpecular: vec4(0, 0, 0, 1), // new RGBA\r\n        cReflective: vec4(0, 0, 0, 1), // new RGBA\r\n        shininess: 0.5,\r\n    },\r\n};\r\n\r\nconst GLOBAL = 'globaldata';\r\nconst LIGHT = 'lightdata';\r\nconst CAMERA = 'cameradata';\r\nconst TRANSBLOCK = 'transblock';\r\nconst OBJECT = 'object';\r\n\r\nconst tagnames = {\r\n    global: {\r\n        DIFFUSE: 'diffusecoeff',\r\n        SPECULAR: 'specularcoeff',\r\n        AMBIENT: 'ambientcoeff',\r\n    },\r\n    light: {\r\n        ID: 'id',\r\n        COLOR: 'color',\r\n        POS: 'position',\r\n    },\r\n    camera: {\r\n        POS: 'pos',\r\n        UP: 'up',\r\n    },\r\n    object: {\r\n        DIFFUSE: { name: 'diffuse', propName: 'cDiffuse' },\r\n        SPECULAR: { name: 'specular', propName: 'cSpecular' },\r\n        AMBIENT: { name: 'ambient', propName: 'cAmbient' },\r\n        REFLECTIVE: { name: 'reflective', propName: 'cReflective' },\r\n        SHININESS: { name: 'shininess', propName: 'shininess' },\r\n        BLEND: { name: 'blend', propName: 'blend' },\r\n    },\r\n    transblock: {\r\n        TRANSLATE: 'translate',\r\n        SCALE: 'scale',\r\n        ROTATE: 'rotate',\r\n    },\r\n};\r\n\r\nexport { defaultData, GLOBAL, LIGHT, CAMERA, TRANSBLOCK, OBJECT, tagnames };\r\n","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\raytracing\\LightingUtils.js",[],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\raytracing\\ImplicitShapes.js",[],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\glm.js",["75","76"],"import {\r\n    dot,\r\n    cross,\r\n    det,\r\n    inv,\r\n    transpose as mat_transpose,\r\n    multiply,\r\n    matrix,\r\n    index,\r\n    subset,\r\n} from 'mathjs';\r\nconst { sin, cos, tan, atan } = Math;\r\n\r\nconst normalize = (vec) => {\r\n    let sqrSum = 0;\r\n\r\n    vec.forEach((val) => (sqrSum += Math.pow(val, 2)));\r\n\r\n    const magnitude = Math.sqrt(sqrSum);\r\n\r\n    return multiply(vec, 1 / magnitude);\r\n};\r\n\r\nconst translate = (M, x) => {\r\n    const dim = parseInt(M.size()[1]);\r\n    const maxDim = dim - 1;\r\n    let indices = [],\r\n        replacements = [];\r\n\r\n    for (let i = 0; i < maxDim; i++) {\r\n        indices.push(i);\r\n        replacements.push(subset(M, index(i, maxDim)) - subset(x, index(i)));\r\n    }\r\n\r\n    M = subset(M, index(indices, maxDim), replacements);\r\n    return M;\r\n};\r\nconst scale = (M, x) => {\r\n    const dim = parseInt(M.size()[1]);\r\n    const maxDim = dim - 1;\r\n\r\n    for (let i = 0; i < maxDim; i++) {\r\n        M = subset(\r\n            M,\r\n            index(i, i),\r\n            subset(M, index(i, i)) * subset(x, index(i))\r\n        ); // is this less efficient?\r\n    }\r\n\r\n    return M;\r\n};\r\nconst rotate = (M, x, a) => {\r\n    console.error('No rotate!');\r\n    return M;\r\n};\r\nconst mat_inv = (M) => {\r\n    if (det(M) === 0) {\r\n        console.error(M);\r\n        return M;\r\n        //id4();\r\n    } else {\r\n        return inv(M);\r\n    }\r\n};\r\nconst radians = (deg) => (deg * Math.PI) / 180;\r\nconst degrees = (rad) => (180 * rad) / Math.PI;\r\nconst clamp = (v, min = 0, max = 1) => {\r\n    if (isNaN(v)) {\r\n        return v.map((value) => {\r\n            return Math.max(Math.min(value, max), min);\r\n        });\r\n    }\r\n    return Math.max(Math.min(v, max), min);\r\n};\r\n\r\nconst mat3 = (row1, row2, row3) => {\r\n    if (row1 && row2 === undefined && row3 === undefined) {\r\n        const mat4ToShrink = row1.clone();\r\n        mat4ToShrink.resize([3, 3]);\r\n        return mat4ToShrink;\r\n    }\r\n    return matrix([row1, row2, row3]);\r\n};\r\n\r\nconst mat4x4 = (row1, row2, row3, row4) => matrix([row1, row2, row3, row4]);\r\n\r\nconst vec3 = (x, y, z) => {\r\n    let vec;\r\n\r\n    if (y === undefined && z === undefined) {\r\n        vec = matrix([x, x, x]);\r\n    } else {\r\n        vec = matrix([x, y, z]);\r\n    }\r\n\r\n    return vec;\r\n};\r\n\r\nconst vec4 = (x, y, z, w) => {\r\n    let vec;\r\n\r\n    if (y === undefined && z === undefined && w === undefined) {\r\n        vec = matrix([x, x, x, x]);\r\n    } else if (z === undefined && w === undefined) {\r\n        vec = x.clone();\r\n        vec.resize([4], y);\r\n    } else {\r\n        vec = matrix([x, y, z, w]);\r\n    }\r\n\r\n    return vec;\r\n};\r\n\r\nconst id4 = () =>\r\n    matrix([\r\n        [1, 0, 0, 0],\r\n        [0, 1, 0, 0],\r\n        [0, 0, 1, 0],\r\n        [0, 0, 0, 1],\r\n    ]);\r\n\r\nconst tests = () => {\r\n    const M = id4();\r\n    const x = vec3(1, 2, 3);\r\n\r\n    const translateSuccess =\r\n        translate(M, x) ===\r\n        matrix([\r\n            [1, 0, 0, -1],\r\n            [0, 1, 0, -2],\r\n            [0, 0, 1, -3],\r\n            [0, 0, 0, 1],\r\n        ]);\r\n};\r\n\r\nexport {\r\n    clamp,\r\n    normalize,\r\n    dot,\r\n    cross,\r\n    mat_inv,\r\n    mat_transpose,\r\n    translate,\r\n    scale,\r\n    rotate,\r\n    sin,\r\n    cos,\r\n    tan,\r\n    atan,\r\n    radians,\r\n    degrees,\r\n    vec3,\r\n    vec4,\r\n    mat3,\r\n    mat4x4,\r\n    id4,\r\n};\r\n","C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\index.js",[],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\extendMatrixUtils.js",[],"C:\\Users\\gkups\\Documents\\Projects\\Games\\javascript-raytracer\\src\\utils\\lib\\mathjsUtils.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":109,"column":5,"nodeType":"83","messageId":"84","endLine":109,"endColumn":11},{"ruleId":"81","severity":1,"message":"85","line":110,"column":5,"nodeType":"83","messageId":"84","endLine":110,"endColumn":10},{"ruleId":"86","severity":1,"message":"87","line":4,"column":5,"nodeType":"88","messageId":"89","endLine":4,"endColumn":9},{"ruleId":"86","severity":1,"message":"87","line":4,"column":5,"nodeType":"88","messageId":"89","endLine":4,"endColumn":9},{"ruleId":"86","severity":1,"message":"90","line":1,"column":10,"nodeType":"88","messageId":"89","endLine":1,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":1,"column":10,"nodeType":"88","messageId":"89","endLine":1,"endColumn":14},{"ruleId":"86","severity":1,"message":"91","line":122,"column":7,"nodeType":"88","messageId":"89","endLine":122,"endColumn":12},{"ruleId":"86","severity":1,"message":"92","line":126,"column":11,"nodeType":"88","messageId":"89","endLine":126,"endColumn":27},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-dupe-keys","Duplicate key 'height'.","ObjectExpression","unexpected","Duplicate key 'width'.","no-unused-vars","'RGBA' is defined but never used.","Identifier","unusedVar","'vec4' is defined but never used.","'tests' is assigned a value but never used.","'translateSuccess' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]